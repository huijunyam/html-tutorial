HTML
html element => <a>, <p>, <h1> define structure of the content
html tag => <a></a> content of that element
html attribute => provide additional information about an element such as id, class, href in <a> tags

<!DOCTYPE html => inform web browser which version of html we are using
The content in <head> will not be shown in the page
The content in <body> will be shown

Self closing elements => only have one tag and do not have closing tag
example: <br>, <img>, <meta>, <wbr>, <embed>, <input>, <param>, <hr>, <link>, <source>

Semantics
is the practice of giving content on the page meaning and structure by using the proper element
Semantic code describe the value of content on a page, regardless of the style or appearance of that content

<div> and <span> have no semantic values, they act as containers solely for styling purpose
<div> block level element, <span> inline level element used to identify smaller grouping of text within block level element

Block vs inline elements
block element begin on new line, occupying any available width
inline element do not begin new line, lining up one after another, and only
maintain width of their content.

Bold text with strong or b
<strong></strong> used to give strong importance tot ext, and is thus most popular option to bold text
<b> element means to stylistically offset the text, which is not always the best choice.

Italicize text with emphasize
to italicize text, we used <em> inline level element, the other option is <i> element

Building structure in html 5
header, nav, article, section, aside, footer

header element => identify the top of a page, article, section or other segment of a page
it is in the body tag, it outline the heading of a segment of a page.

nav => identified a section of major navigational links on a page. It should be reserved for primary navigation sections only

article => used to identify a section of independent, self contained content maybe independent distributed or reused.

section => used to identify a thematic grouping of content

aside => hold content such as sidebars, inserts, or brief explanation, that is related to the content surrounding it

footer => identifies the closing or end of a page, section, or other segment of a page
it usually found at the bottom of its parent

list of character encoding can be found in http://www.copypastecharacter.com/

Links
relative path => link pointing to other page of the same website which does not include the domain (.com, .org, .edu)
the link pointing to another page on the same website, the href attribute value needs to include only the filename of the page

absolute path => link to other website outside of the current one, where the href must include full domain

email link => href need to start with mailto:followed by email address
ex: href="mailto:shay@awesome.com"
additionally, subject, body, and other information can be populated for the email
to add subject line, we will include subject= parameter after the email address
to add body line, we will include body= parameter
binding one parameter with another, need to separate with &
after the email address, need to add ? to bind the hyperlink path, spacing need to be encoded with %20
ex: <a href="mailto:shay@awesome.com?subject=Reaching%20Out&body=How%20are%20you">Email Me</a>

open link in new window
used target attr with a value of _blank
target attr determine exactly where the link to be display, and the _blank value specifies a new window
<a href="http://shayhowe.com/" target="_blank">Shay Howe</a>

linking to parts of the same page
we can create an on page link by first setting an id attribute on the element where we wish to link to
then use the id in the href
ex: <a href="#top">Back to top</a>

CSS
linking CSS, we used rel attribute with a value of stylesheet to specify their relationship between html and css
href attr used to identify the location or path of the CSS file

selectors => which elements within our html to target and apply styles to
selector generally target an attribute value such as id and class or element

property => once the element is selected, a property determine the styles will be applied to that element
it is written inside the {} and followed by semicolon
such as background, background-color, font-size, height, width

values => determine what style we like to apply for the property

type selector => target element by their element type
such as <div>, <p>

class selector => allow us to select an element based on the element's class attribute value
defined by a leading period .awesome {}

id selector => more precise than class selector, target one unique element
It can only be used once per page.
denoted by # followed by id attribute value

CSS reset
to ensure cross browser compatibility because google chrome will has its own set
of default styling that is different from internet explorer or safari
the reset generally removed any sizing, margin, padding or additional styling
Css reset need to be placed at the top of the css file
one of the most popular reset by Eric Meyer's reset http://meyerweb.com/eric/tools/css/reset/
or normalize.css created by Nicolas Gallagher

display property
block, inline, inline-block, none
block => block level element
inline => inline level element
inline block => behave as a block level element, accepting all box model properties,
but it will display in line with other elements and it will not begin on a new line by default
none => hide an element and render the page as if that element doesn't exist

box model
every element on a page is a rectangular box and may have height, width, padding, borders, and margins
to set the height and width of non inline element such as block and inline block, use height and width property

margin sets the amount of space that surround the element
inline element can't set the top and bottom margin
inline block and block element accept vertical margin (top and bottom)

padding falls inside the element border, used to provide spacing directly within an element.
inline element can have vertical (top and bottom) padding
block and inline block work like normal for margin and padding

The margin and padding properties are completely transparent and do not accept any color values. Being transparent,
though, they show the background colors of relative elements. For margins, we see the background color of the parent
element, and for padding, we see the background color of the element the padding is applied to.

border require width, style and color
style => solid, double, dashed, dotted, none
border-left, border-top, border-right, border-bottom
border-radius accepts length unit, including percentages and pixel

box-sizing property => allow us to change exactly how the box model works and how
an element's size is calculated. The property accepts three primary values such as
content-box, padding-box, border-box

content-box => is the default value, leaving the box model as an additive design
The size of an element begins with the width and height property and then any padding, border, or margin property values are added from there

padding-box alters the box model by including any padding property values within the height and width of an element.
When using the padding-box value, if an element has a width of 400 pixels and a padding of 20 pixels around every side, the
actual width will remain 400 pixels. As any padding values increase, the content size within an element shrinks proportionately.
If we add a border or margin, those values will be added to the width or height properties to calculate the full box size.
For example, if we add a border of 10 pixels and a padding of 20 pixels around every side of the element with a width of 400 pixels,
the actual full width will become 420 pixels.

border-box alters the box model so that any border or padding property values are included within the width and height of an element.
When using the border-box value, if an element has a width of 400 pixels, a padding of 20 pixels around every side, and a border of 10 pixels
around every side, the actual width will remain 400 pixels.

Generally speaking, the best box-sizing value to use is border-box. The border-box value makes our math much, much easier.
If we want an element to be 400 pixels wide, it is, and it will remain 400 pixels wide no matter what padding or border values we add to it.

sometimes need to add vendor prefix such as mozilla firefox(-moz-), internet explorer(-ms-), webkit(google chrome and safari ==> -webkit-)

Positioning content
position with float property accept left or right value
allow us to take an element, remove it from the normal flow of a page, and position it to the left or right of its parent element
All other elements on the page will then flow around the floated element.
When the float property is used on multiple elements at the same time, it provides the ability to create a layout by floating elements
directly next to or opposite each other, as seen in multiple-column layouts.

For reference, when an element is floated, it will float all the way to the edge of its parent element. If there isnâ€™t a parent element,
the floated element will then float all the way to the edge of the page.
if want to make multi column, we can float the block left and the other block right

When we float an element, we take it out of the normal flow of the HTML document. This causes the width of that element to
default to the width of the content within it. It can be corrected by adding a fixed width property value to each column.
Additionally, to prevent floated elements from touching one another, causing the content of one to sit directly next to the content of
the other, we can use the margin property to create space between elements.

If the elements that we want to float did not have a display value of block, it will change the display property to block when we float the element
an element with a display value of inline, such as the <span> inline-level element, ignores any height or width property values. However,
should that inline-level element be floated, its display value will be changed to block, and it may then accept height or width property values.

if only float two column, we can use float:left and float:right for each of the elements
but if we want to have three or more column, we need to float all of them to left, and adjust the width of each of the elements

the proper styles will not render on an element that it is sitting next to or is a parent element of a floated element. When an element is floated,
it is taken out of the normal flow of the page, and, as a result, the styles of elements around that floated element can be negatively impacted.
Often margin and padding property values arenâ€™t interpreted correctly, causing them to blend into the floated element; other properties can be affected, too.
Another pitfall is that sometimes unwanted content begins to wrap around a floated element. Removing an element from the flow of the document allows
all the elements around the floated element to wrap and consume any available space around the floated element, which is often undesired.

To prevent content from wrapping around floated elements, we need to clear, or contain, those floats and return the page to its normal flow.

clearing float
clear property has value of left, right, both
The left value will clear left floats, while the right value will clear right floats. The both value, however, will clear both left and right floats
and is often the most ideal value.

if we use the clear property with the value of both on the <footer> element, we are able to clear the floats. It is important that this clear be
applied to an element appearing after the floated elements, not before, to return the page to its normal flow.

containing float
Rather than clearing floats, another option is to contain the floats. The outcomes of containing floats versus those of clearing them are nearly
the same; however, containing floats does help to ensure that all of our styles will be rendered properly.
To contain floats, the floated elements must reside within a parent element. The parent element will act as a container, leaving
the flow of the document completely normal outside of it.
parent container : .cf { content : ""; clear: both; display: block}

position with inline block
useful for placing elements next to one another within a line
display elements within a line while allowing them to accept all box model properties, including height, width, padding, border, and margin.
Using inline-block elements allows us to take full advantage of the box model without having to worry about clearing any floats.
However, inline block elements have default white spacing in between the blocks. There are a number of ways to remove the space between
inline-block elements, and some are more complex than others.

The first solution is to put each new <section> elementâ€™s opening tag on the same line as the previous <section> elementâ€™s closing tag.
Rather than using a new line for each element, weâ€™ll end and begin elements on the same line. Writing inline-block elements this way ensures
that the space between inline-block elements within HTML doesnâ€™t exist; consequently, the space will not appear when the page is rendered.

Create reusable layout
using col-1-2...
My approach is to use inline-block elements to create the gridâ€”or layoutâ€”of a page and to then use floats when I want content to wrap around a given element
.col-1-3 {
  width: 33.33%;
}
.col-2-3 {
  width: 66.66%;
}

positioning element
position property has values of static, relative, absolute
then we can use top, bottom, left, and right property
position by moving the elements around

relative => allows elements to appear within the normal flow a page, leaving space for an element as intended while not allowing other elements
to flow around it; however, it also allows an elementâ€™s display position to be modified with the box offset properties.

absolute => will not appear within the normal flow of a document, and the original space and position of the absolutely positioned element will not be preserved.
absolutely positioned elements are moved in relation to their closest relatively positioned parent element. Should a relatively positioned
parent element not exist, the absolutely positioned element will be positioned in relation to the <body> element.

Working with typography
typeface => is what we see. It is the artistic impression of how text looks, feels, and reads.
font => file that contains a typeface. Using a font on a computer allows the computer to access the typeface.

setting a font color
color: yellow;

font-style property has values of normal, italic, oblique, inherit
font-variant property has values of normal, small-caps, inherit
font-weight property has values of normal, bold, bolder, lighter, inherit, numeric value(100-900)
line-height property has values in px ==>used to define the spacing between two lines

text align
has values of left, right, center, justify, inherit
The text-align values left and right will align text within an element to the left or right,
whereas the float values left and right will move the entire element.

text-decoration: underline, none, overline, line-through, inherit
text-indent: number in px ==> used to indent the first line
positive value indent inward and negative value indent outward
text-shadow allows us to add a shadow or multiple shadows to text. The
property generally takes four values, all listed one after the other from left to right.
The first three values are lengths, and the last value is a color.
 text-shadow: 3px 6px 2px rgba(0, 0, 0, .3);
The box-shadow property works just like the text-shadow property, accepting values for horizontal and vertical offsets, a blur, and a color.
text-transform: none, capitalize, uppercase, lowercase, inherit

letter-spacing adjust the space (or tracking) between the letters on a page.
A positive length value will push letters farther apart from one another, while
a negative length value will pull letters closer together. The keyword value
none will return the space between letters back to its normal size.

word-spacing  accepts the same length values and keywords as the letter-spacing property.
Instead of spacing letters apart, though, the word-spacing property applies those values between words.

citation and quotation
<cite>: Used to reference a creative work, author, or resource
<q>: Used for short, inline quotations
<blockquote>: Used for longer external quotations
<p>The book <cite><a href="http://www.amazon.com/Steve-Jobs-Walter-Isaacson/dp/1451648537">Steve Jobs</a></cite> is truly inspirational.</p>
<p>Steve Jobs once said, <q>One home run is much better than two doubles.</q></p>
<p><a href="http://www.businessweek.com/magazine/content/06_06/b3970001.htm">Steve Jobs</a> once said, <q cite="http://www.businessweek.com/magazine/content/06_06/b3970001.htm">One home run is much better than two doubles.</q></p>
<blockquote>
  <p>&#8220;In most people&#8217;s vocabularies, design is a veneer. It&#8217;s interior decorating. It&#8217;s the fabric of the curtains, of the sofa. But to me, nothing could be further from the meaning of design. Design is the fundamental soul of a human-made creation that ends up expressing itself in successive outer layers of the product.&#8221;</p>
</blockquote>
<blockquote cite="http://money.cnn.com/magazines/fortune/fortune_archive/2000/01/24/272277/index.htm">
  <p>&#8220;In most people&#8217;s vocabularies, design is a veneer. It&#8217;s interior decorating. It&#8217;s the fabric of the curtains, of the sofa. But to me, nothing could be further from the meaning of design. Design is the fundamental soul of a human-made creation that ends up expressing itself in successive outer layers of the product.&#8221;</p>
  <p><cite>&#8212; Steve Jobs in <a href="http://money.cnn.com/ magazines/fortune/fortune_archive/2000/01/24/272277/index.htm"> Fortune Magazine</a></cite></p>
</blockquote>

Setting background and gradient
background property accepts colors and images in shorthand form
background-color property responsible for setting solid background colors

We can use RGBa or HSLa value as a transparent background
The url() function value will be the background imageâ€™s path, and the familiar rules for creating hyperlink paths apply here.
background-image: url("alert.png");
Adding a background image solely using a url value can provide undesirable results, as by default the background image will repeat horizontally and
vertically from the top left of the given element to fill up the elementâ€™s background. Thankfully we can use the background-repeat and background-position
properties to control how or even whether the image repeats.

background-repeat property can be used to change the direction in which a background image is repeated
It takes in values of repeat, repeat-x, repeat-y, no-repeat

background-position allows us to adjust the position of the image relative to the top left hand corner
It required two values: a horizontal offset(the first val) and a vertical offset(the second val)

Gradient background
Within CSS, gradient background are treated as background images
Gradient background values were one of the values that required the use of vendor prefixes.
Fortunately, most browsers have since eliminated the need for a vendor prefix in order to render a gradient background;
however, it is still worth outlining vendor prefixes to ensure the best support.

Linear gradients are identified by using the linear-gradient() function within the background or background-image property.
The linear-gradient() function must include two color values, the first of which will be the beginning color value and the
second of which will be the ending color value. The browser will then handle the transition between the two colors.
By default, linear gradient backgrounds move from the top to the bottom of an element, transitioning smoothly between the first color value and the second
For example, should we want a gradient to move from the left of an element to the right, we can use the keyword value to
right to identify the direction in which the linear gradient should progress. Keyword values may also be combined. If we want the gradient to move from the
left top to the right bottom of an element, we can use the keyword value of to right bottom.
div {
  background: #466368;
  background: linear-gradient(to right bottom, #648880, #293f50);
}
Besides keywords, degree values are also acceptable. If we want our gradient to move to the left top of an element, we can use the degree value of 315deg,
or if we want our gradient to move to the right bottom of an element, we can use the degree value of 135deg.

Radial gradient background
Radial gradients work from the inside to the outside of an element. Thus, the first color identified within the radial-gradient() function will sit in the
absolute center of the element, and the second color will sit on the outside of an element. The browser will then create the transition between the two colors.
At a minimum, gradient backgrounds will transition from one color to another; however, we may add multiple colors to a gradient and have the browser transition between all of them.
div {
  background: #648880;
  background: linear-gradient(to right, #f6f1d3, #648880, #293f50);
}
